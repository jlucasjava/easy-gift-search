// Script para testar a configura√ß√£o do Google Search API
require('dotenv').config();
const axios = require('axios');

// Fun√ß√£o para exibir mensagem formatada no console
function log(message, color = 'white') {
  const colors = {
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    white: '\x1b[37m',
    reset: '\x1b[0m'
  };

  console.log(`${colors[color]}${message}${colors.reset}`);
}

// Verifica a configura√ß√£o atual
async function verificarConfiguracao() {
  log('======== TESTE DE CONFIGURA√á√ÉO DO GOOGLE SEARCH API ========', 'cyan');
  
  // Vari√°veis de ambiente
  const googleApiKey = process.env.GOOGLE_SEARCH_API_KEY;
  const googleCx = process.env.GOOGLE_SEARCH_CX;
  const useGoogleSearch = process.env.USE_GOOGLE_SEARCH_API;
  
  log('\nüîç Vari√°veis de ambiente:', 'blue');
  log(`GOOGLE_SEARCH_API_KEY: ${googleApiKey ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`, googleApiKey ? 'green' : 'red');
  log(`GOOGLE_SEARCH_CX: ${googleCx ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`, googleCx ? 'green' : 'red');
  log(`USE_GOOGLE_SEARCH_API: ${useGoogleSearch || 'n√£o definida'} ${useGoogleSearch === 'true' ? '‚úÖ' : '‚ùå'}`, useGoogleSearch === 'true' ? 'green' : 'red');
  
  // Strings de verifica√ß√£o
  log('\nüìä Testes de condi√ß√£o booleana:', 'magenta');
  log(`useGoogleSearch === 'true': ${useGoogleSearch === 'true'}`, useGoogleSearch === 'true' ? 'green' : 'red');
  log(`useGoogleSearch === true: ${useGoogleSearch === true}`, useGoogleSearch === true ? 'green' : 'red');
  log(`useGoogleSearch == true: ${useGoogleSearch == true}`, useGoogleSearch == true ? 'green' : 'red');
  log(`useGoogleSearch === '1': ${useGoogleSearch === '1'}`, useGoogleSearch === '1' ? 'green' : 'red');
  
  // Teste de requisi√ß√£o √† API do Google
  if (googleApiKey && googleCx && (useGoogleSearch === 'true' || useGoogleSearch === true || useGoogleSearch === '1')) {
    log('\nüîç Testando requisi√ß√£o √† API do Google...', 'blue');
    
    try {
      const googleUrl = `https://www.googleapis.com/customsearch/v1?key=${googleApiKey}&cx=${googleCx}&q=presente&gl=br`;
      
      const response = await axios.get(googleUrl, { timeout: 10000 });
      
      if (response.data && response.data.items) {
        log(`‚úÖ API do Google respondeu com sucesso! ${response.data.items.length} resultados encontrados.`, 'green');
        
        // Mostrar um exemplo de resultado
        if (response.data.items.length > 0) {
          const primeiroItem = response.data.items[0];
          log('\nüìå Exemplo de resultado:', 'yellow');
          log(`T√≠tulo: ${primeiroItem.title}`, 'white');
          log(`Link: ${primeiroItem.link}`, 'white');
          if (primeiroItem.pagemap && primeiroItem.pagemap.cse_image) {
            log(`Imagem: ${primeiroItem.pagemap.cse_image[0]?.src || 'N√£o dispon√≠vel'}`, 'white');
          }
        }
        
        return true;
      } else {
        log('‚ùå API do Google respondeu, mas sem resultados.', 'yellow');
      }
    } catch (error) {
      log(`‚ùå Erro ao testar API do Google: ${error.message}`, 'red');
      if (error.response) {
        log(`Status: ${error.response.status}`, 'red');
        log(`Mensagem: ${JSON.stringify(error.response.data)}`, 'red');
      }
    }
  } else {
    log('\n‚ö†Ô∏è Vari√°veis de ambiente incompletas. N√£o √© poss√≠vel testar a API do Google.', 'yellow');
  }
  
  return false;
}

// Testa o servi√ßo local
async function testarServicoLocal() {
  log('\nüîç Testando servi√ßo local...', 'blue');
  
  try {
    // Usar o servi√ßo diretamente se estiver dispon√≠vel
    const googleSearchService = require('./backend/services/googleSearchService');
    
    const resultados = await googleSearchService.searchProducts('presente anivers√°rio');
    
    if (resultados && resultados.length > 0) {
      log(`‚úÖ Servi√ßo local respondeu com sucesso! ${resultados.length} resultados encontrados.`, 'green');
      
      // Verificar fonte dos resultados
      const fonteGoogle = resultados.some(item => item.source === 'Google Custom Search');
      log(`Fonte dos resultados: ${fonteGoogle ? '‚úÖ Google Custom Search (REAL)' : '‚ö†Ô∏è Simulados'}`, fonteGoogle ? 'green' : 'yellow');
      
      // Mostrar um exemplo
      log('\nüìå Exemplo de resultado:', 'yellow');
      log(`T√≠tulo: ${resultados[0].title}`, 'white');
      log(`Link: ${resultados[0].link}`, 'white');
      log(`Fonte: ${resultados[0].source}`, 'white');
      log(`Imagem: ${resultados[0].image || 'N√£o dispon√≠vel'}`, 'white');
      
      return true;
    } else {
      log('‚ö†Ô∏è Servi√ßo local respondeu, mas sem resultados.', 'yellow');
    }
  } catch (error) {
    log(`‚ùå Erro ao testar servi√ßo local: ${error.message}`, 'red');
  }
  
  return false;
}

// Executa todos os testes
async function executarTestes() {
  const configOk = await verificarConfiguracao();
  const servicoOk = await testarServicoLocal();
  
  log('\nüìã RESULTADO FINAL:', 'cyan');
  
  if (configOk && servicoOk) {
    log('‚úÖ GOOGLE CUSTOM SEARCH API EST√Å FUNCIONANDO CORRETAMENTE!', 'green');
  } else {
    log('‚ùå GOOGLE CUSTOM SEARCH API N√ÉO EST√Å FUNCIONANDO CORRETAMENTE', 'red');
    
    log('\nüîß CORRE√á√ïES SUGERIDAS:', 'yellow');
    if (!configOk) {
      log('1. Verifique se as vari√°veis de ambiente est√£o configuradas corretamente', 'yellow');
      log('2. Certifique-se de que USE_GOOGLE_SEARCH_API est√° definida como "true"', 'yellow');
      log('3. Verifique se as chaves de API s√£o v√°lidas', 'yellow');
    }
    if (!servicoOk) {
      log('1. Verifique se o servi√ßo googleSearchService.js est√° carregando corretamente', 'yellow');
      log('2. Verifique se h√° erros nos logs do servidor', 'yellow');
      log('3. Execute o script corrigir-deteccao-google-search.js para melhorar a detec√ß√£o da vari√°vel', 'yellow');
    }
  }
  
  log('\n==============================================================', 'cyan');
}

// Iniciar testes
executarTestes();
