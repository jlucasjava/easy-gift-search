// validar-google-api-producao.js
// Script para validar o funcionamento da Google Custom Search API em produ√ß√£o
const axios = require('axios');

// URL da API em produ√ß√£o
const PRODUCTION_URL = 'https://easy-gift-search.onrender.com';
const TEST_QUERY = 'presentes para crian√ßas';

async function validarGoogleAPIProducao() {
  console.log('üß™ VALIDA√á√ÉO DA GOOGLE CUSTOM SEARCH API EM PRODU√á√ÉO');
  console.log('====================================================');
  console.log(`üîç URL: ${PRODUCTION_URL}`);
  console.log(`üîç Query de teste: "${TEST_QUERY}"`);
  console.log('');

  try {
    // 1. Verificar se o servidor est√° respondendo
    console.log('1Ô∏è‚É£ Verificando se o servidor est√° online...');
    const statusResponse = await axios.get(`${PRODUCTION_URL}/api/monitor/status`);
    
    if (statusResponse.data && statusResponse.status === 200) {
      console.log('‚úÖ Servidor est√° online e respondendo');
      
      // Verificar configura√ß√£o da API
      if (statusResponse.data.apis && statusResponse.data.apis.google) {
        const googleStatus = statusResponse.data.apis.google;
        console.log(`‚öôÔ∏è Status da Google API: ${googleStatus.active ? '‚úÖ ATIVA' : '‚ùå INATIVA'}`);
        console.log(`üîë API Key configurada: ${googleStatus.keyConfigured ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
        console.log(`üîç CSE ID configurado: ${googleStatus.cseidConfigured ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
      } else {
        console.log('‚ö†Ô∏è Informa√ß√µes da API do Google n√£o dispon√≠veis na resposta de status');
      }
    } else {
      console.log('‚ùå Servidor n√£o est√° respondendo corretamente');
      return;
    }
    
    // 2. Testar a busca de produtos
    console.log('\n2Ô∏è‚É£ Testando a busca de produtos...');
    const searchResponse = await axios.get(`${PRODUCTION_URL}/api/products/search?q=${encodeURIComponent(TEST_QUERY)}`);
    
    if (searchResponse.data && searchResponse.status === 200) {
      const produtos = searchResponse.data.produtos || [];
      console.log(`‚úÖ Busca realizada com sucesso: ${produtos.length} produtos encontrados`);
      
      // Validar se h√° produtos reais
      if (produtos.length > 0) {
        console.log('\nüìä AMOSTRA DE PRODUTOS:');
        
        // Mostrar os 3 primeiros produtos ou menos se houver menos
        const amostra = produtos.slice(0, Math.min(3, produtos.length));
        
        amostra.forEach((produto, index) => {
          console.log(`\nüõçÔ∏è PRODUTO ${index + 1}:`);
          console.log(`üè∑Ô∏è Nome: ${produto.nome || 'N/A'}`);
          console.log(`üí∞ Pre√ßo: ${produto.preco || 'N/A'}`);
          console.log(`üîó URL: ${produto.url || 'N/A'}`);
          console.log(`üñºÔ∏è Imagem: ${produto.imagem ? '‚úÖ Presente' : '‚ùå Ausente'}`);
          console.log(`üè™ Marketplace: ${produto.marketplace || 'Desconhecido'}`);
          
          // Validar URLs
          const urlValida = produto.url && (produto.url.startsWith('http://') || produto.url.startsWith('https://'));
          console.log(`üîó URL v√°lida: ${urlValida ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
          
          // Validar imagens
          const imagemValida = produto.imagem && (produto.imagem.startsWith('http://') || produto.imagem.startsWith('https://'));
          console.log(`üñºÔ∏è Imagem v√°lida: ${imagemValida ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
        });
        
        // Estat√≠sticas gerais
        const urlsValidas = produtos.filter(p => p.url && (p.url.startsWith('http://') || p.url.startsWith('https://'))).length;
        const imagensValidas = produtos.filter(p => p.imagem && (p.imagem.startsWith('http://') || p.imagem.startsWith('https://'))).length;
        
        console.log('\nüìä ESTAT√çSTICAS GERAIS:');
        console.log(`üî¢ Total de produtos: ${produtos.length}`);
        console.log(`üîó URLs v√°lidas: ${urlsValidas} (${Math.round(urlsValidas/produtos.length*100)}%)`);
        console.log(`üñºÔ∏è Imagens v√°lidas: ${imagensValidas} (${Math.round(imagensValidas/produtos.length*100)}%)`);
        
        // Verificar se os resultados s√£o de marketplaces conhecidos
        const marketplaces = {};
        produtos.forEach(p => {
          if (p.marketplace) {
            marketplaces[p.marketplace] = (marketplaces[p.marketplace] || 0) + 1;
          }
        });
        
        console.log('\nüè™ DISTRIBUI√á√ÉO DE MARKETPLACES:');
        Object.keys(marketplaces).forEach(m => {
          console.log(`- ${m}: ${marketplaces[m]} produtos (${Math.round(marketplaces[m]/produtos.length*100)}%)`);
        });
        
        // Conclus√£o
        const porcentagemValida = Math.round((Math.min(urlsValidas, imagensValidas) / produtos.length) * 100);
        
        console.log('\nüèÅ CONCLUS√ÉO:');
        if (porcentagemValida >= 80) {
          console.log('‚úÖ API FUNCIONANDO CORRETAMENTE: A maioria dos produtos possui URLs e imagens v√°lidas');
        } else if (porcentagemValida >= 50) {
          console.log('‚ö†Ô∏è API FUNCIONANDO PARCIALMENTE: Alguns produtos possuem URLs ou imagens inv√°lidas');
        } else {
          console.log('‚ùå API COM PROBLEMAS: A maioria dos produtos possui URLs ou imagens inv√°lidas');
        }
      } else {
        console.log('‚ùå Nenhum produto encontrado na busca');
      }
    } else {
      console.log('‚ùå Falha ao realizar a busca de produtos');
    }
    
  } catch (error) {
    console.error('‚ùå ERRO NA VALIDA√á√ÉO:', error.message);
    
    if (error.response) {
      console.error('Detalhes do erro:');
      console.error(`Status: ${error.response.status}`);
      console.error(`Mensagem: ${JSON.stringify(error.response.data)}`);
    }
  }
  
  console.log('\n====================================================');
  console.log('üèÅ FIM DA VALIDA√á√ÉO');
  console.log('====================================================');
}

// Executar a valida√ß√£o
validarGoogleAPIProducao();
