// Script para verifica√ß√£o e corre√ß√£o da configura√ß√£o do Google Search API no Render
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// Fun√ß√£o para exibir mensagem formatada no console
function log(message, color = 'white') {
  const colors = {
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    white: '\x1b[37m',
    reset: '\x1b[0m'
  };

  console.log(`${colors[color]}${message}${colors.reset}`);
}

// Verificar configura√ß√£o atual
function verificarConfiguracao() {
  log('======== VERIFICA√á√ÉO DE CONFIGURA√á√ÉO DO GOOGLE SEARCH API ========', 'cyan');
  
  // Verificar vari√°veis de ambiente
  const googleApiKey = process.env.GOOGLE_SEARCH_API_KEY;
  const googleCx = process.env.GOOGLE_SEARCH_CX;
  const useGoogleSearch = process.env.USE_GOOGLE_SEARCH_API;
  
  log('\nüîç Vari√°veis de ambiente encontradas:', 'blue');
  log(`GOOGLE_SEARCH_API_KEY: ${googleApiKey ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`, googleApiKey ? 'green' : 'red');
  log(`GOOGLE_SEARCH_CX: ${googleCx ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`, googleCx ? 'green' : 'red');
  log(`USE_GOOGLE_SEARCH_API: ${useGoogleSearch || 'n√£o definida'} ${useGoogleSearch === 'true' ? '‚úÖ' : '‚ùå'}`, useGoogleSearch === 'true' ? 'green' : 'red');

  // Verificar strings de valida√ß√£o
  log('\nüîç Validando strings de ativa√ß√£o:', 'blue');
  log(`useGoogleSearch === 'true': ${useGoogleSearch === 'true'}`, useGoogleSearch === 'true' ? 'green' : 'red');
  log(`useGoogleSearch === true: ${useGoogleSearch === true}`, useGoogleSearch === true ? 'green' : 'red');
  log(`useGoogleSearch == true: ${useGoogleSearch == true}`, useGoogleSearch == true ? 'green' : 'red');
  log(`useGoogleSearch === '1': ${useGoogleSearch === '1'}`, useGoogleSearch === '1' ? 'green' : 'red');
  
  // Status geral
  const googleSearchEnabled = useGoogleSearch === 'true' || useGoogleSearch === true || useGoogleSearch === '1';
  const configCompleta = googleApiKey && googleCx && googleSearchEnabled;
  
  log('\nüìä RESULTADO DA VERIFICA√á√ÉO:', 'magenta');
  if (configCompleta) {
    log('‚úÖ GOOGLE CUSTOM SEARCH API EST√Å CORRETAMENTE CONFIGURADA', 'green');
  } else {
    log('‚ùå GOOGLE CUSTOM SEARCH API N√ÉO EST√Å CORRETAMENTE CONFIGURADA', 'red');
    
    // Identificar problemas espec√≠ficos
    if (!googleApiKey) log('   ‚ùå GOOGLE_SEARCH_API_KEY n√£o est√° definida', 'red');
    if (!googleCx) log('   ‚ùå GOOGLE_SEARCH_CX n√£o est√° definido', 'red');
    if (!googleSearchEnabled) log('   ‚ùå USE_GOOGLE_SEARCH_API n√£o est√° definida como "true"', 'red');
  }
  
  return configCompleta;
}

// Gerar instru√ß√µes para configura√ß√£o no Render
function gerarInstrucoesRender() {
  log('\nüìù Gerando instru√ß√µes para configura√ß√£o no Render...', 'blue');
  
  const conteudo = `# Configura√ß√£o do Google Search API no Render - INSTRU√á√ïES ATUALIZADAS

## ‚ö†Ô∏è PROBLEMA IDENTIFICADO

A API do Google Custom Search n√£o est√° funcionando corretamente em produ√ß√£o (Render). 
As verifica√ß√µes indicam que a vari√°vel de ambiente \`USE_GOOGLE_SEARCH_API\` n√£o est√° sendo reconhecida como \`true\`.

## ‚úÖ SOLU√á√ÉO PASSO A PASSO

1. **Acesse o Dashboard do Render**
   - URL: https://dashboard.render.com/
   - Fa√ßa login com suas credenciais
   - Selecione o servi√ßo "easy-gift-search"

2. **Configure as Vari√°veis de Ambiente**
   - Clique na aba "Environment"
   - **REMOVA** todas as vari√°veis de ambiente existentes relacionadas ao Google Search API:
     - USE_GOOGLE_SEARCH_API
     - GOOGLE_SEARCH_API_KEY
     - GOOGLE_SEARCH_CX
   - Adicione novamente as seguintes vari√°veis (exatamente como mostrado abaixo):
   
   \`\`\`
   USE_GOOGLE_SEARCH_API=true
   GOOGLE_SEARCH_API_KEY=AIzaSyBs07nRYL0fYREou8gwDkS7fruBydwXfvI
   GOOGLE_SEARCH_CX=e17d0e713876e4dca
   \`\`\`
   
   - Marque a op√ß√£o "Secret" para as chaves de API
   - Clique em "Save Changes"

3. **Force um Novo Deploy com Cache Limpo**
   - Clique em "Manual Deploy" no menu √† direita
   - Selecione "Clear Build Cache & Deploy"
   - Aguarde a conclus√£o do deploy (geralmente leva alguns minutos)

4. **Verifique os Logs**
   - Ap√≥s o deploy, clique na aba "Logs"
   - Procure por mensagens de inicializa√ß√£o do servidor
   - Confirme que aparece a mensagem:
     \`\`\`
     üéâ STATUS GERAL: GOOGLE CUSTOM SEARCH API ATIVA
     \`\`\`

5. **Teste a Aplica√ß√£o**
   - Acesse o URL da aplica√ß√£o
   - Fa√ßa uma busca por produtos
   - Verifique se os resultados est√£o sendo exibidos corretamente
   - Confirme que as imagens e links dos produtos s√£o reais (n√£o simulados)

## ‚ùì PROBLEMAS COMUNS

1. **A vari√°vel USE_GOOGLE_SEARCH_API n√£o √© reconhecida como true**
   - Certifique-se de digitar exatamente \`true\` (em min√∫sculas, sem aspas)
   - Tente remover todas as vari√°veis e adicion√°-las novamente
   - Verifique se n√£o h√° espa√ßos extras no valor

2. **Os resultados continuam sendo simulados**
   - Verifique se o cache do aplicativo foi limpo durante o deploy
   - Tente adicionar \`?nocache=1\` ao final da URL para for√ßar uma atualiza√ß√£o
   - Certifique-se de que todas as tr√™s vari√°veis foram configuradas corretamente

3. **Erros nos logs**
   - Se aparecerem erros relacionados √† API do Google, verifique se as chaves est√£o corretas
   - Certifique-se de que o formato do CX est√° correto (sem espa√ßos)

## üìã VERIFICA√á√ÉO FINAL

Para confirmar que tudo est√° funcionando, acesse:

\`\`\`
https://easy-gift-search.onrender.com/api/status
\`\`\`

Voc√™ deve ver uma resposta JSON com \`googleSearchEnabled: true\`.

Data da atualiza√ß√£o: ${new Date().toLocaleDateString('pt-BR')} ${new Date().toLocaleTimeString('pt-BR')}
`;

  // Salvar instru√ß√µes em arquivo
  const filePath = path.join(process.cwd(), 'RENDER_CONFIG_ATUALIZADO.md');
  fs.writeFileSync(filePath, conteudo);
  
  log(`‚úÖ Instru√ß√µes geradas com sucesso: ${filePath}`, 'green');
  
  // Criar script para teste ap√≥s a configura√ß√£o no Render
  criarScriptTestePosConfiguracao();
}

// Criar script para testar a configura√ß√£o ap√≥s as mudan√ßas no Render
function criarScriptTestePosConfiguracao() {
  const conteudo = `// Script para testar a configura√ß√£o do Google Search API ap√≥s mudan√ßas no Render
require('dotenv').config();
const axios = require('axios');

// URLs para teste
const RENDER_URL = 'https://easy-gift-search.onrender.com';
const API_STATUS_URL = \`\${RENDER_URL}/api/status\`;
const API_SEARCH_URL = \`\${RENDER_URL}/api/search\`;

// Fun√ß√£o para exibir mensagem formatada no console
function log(message, color = 'white') {
  const colors = {
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    white: '\x1b[37m',
    reset: '\x1b[0m'
  };

  console.log(\`\${colors[color]}\${message}\${colors.reset}\`);
}

// Fun√ß√£o para verificar o status da API
async function verificarStatusAPI() {
  try {
    log('======== TESTE DE CONFIGURA√á√ÉO DO GOOGLE SEARCH API NO RENDER ========', 'cyan');
    log('\\nüîç Verificando status da API...', 'blue');
    
    const response = await axios.get(API_STATUS_URL);
    const data = response.data;
    
    log('üìä Resposta do servidor:', 'magenta');
    log(\`Status: \${response.status}\`, 'yellow');
    
    // Verificar status do Google Search
    const googleEnabled = data.apis && data.apis.google && data.apis.google.enabled;
    
    log(\`\\nGoogle Search API: \${googleEnabled ? '‚úÖ ATIVA' : '‚ùå INATIVA'}\`, googleEnabled ? 'green' : 'red');
    
    if (data.apis && data.apis.google) {
      const googleApi = data.apis.google;
      log('Detalhes da configura√ß√£o:', 'blue');
      log(\`- API Key configurada: \${googleApi.apiKeyConfigured ? '‚úÖ' : '‚ùå'}\`, googleApi.apiKeyConfigured ? 'green' : 'red');
      log(\`- CX configurado: \${googleApi.cxConfigured ? '‚úÖ' : '‚ùå'}\`, googleApi.cxConfigured ? 'green' : 'red');
      log(\`- Habilitada: \${googleApi.enabled ? '‚úÖ' : '‚ùå'}\`, googleApi.enabled ? 'green' : 'red');
    }
    
    return googleEnabled;
  } catch (error) {
    log(\`‚ùå Erro ao verificar status da API: \${error.message}\`, 'red');
    return false;
  }
}

// Fun√ß√£o para testar a busca
async function testarBusca() {
  try {
    log('\\nüîç Testando busca de produtos...', 'blue');
    
    const query = 'presente anivers√°rio';
    const response = await axios.get(\`\${API_SEARCH_URL}?q=\${encodeURIComponent(query)}\`);
    const data = response.data;
    
    log(\`Busca por: "\${query}"\`, 'yellow');
    log(\`Resultados encontrados: \${data.length || 0}\`, 'yellow');
    
    if (data && data.length > 0) {
      // Verificar se os resultados s√£o reais ou simulados
      const primeiroResultado = data[0];
      log('\\nüìä Primeiro resultado:', 'magenta');
      log(\`T√≠tulo: \${primeiroResultado.title}\`, 'white');
      log(\`Link: \${primeiroResultado.link}\`, 'white');
      log(\`Fonte: \${primeiroResultado.source}\`, 'white');
      
      const resultadosReais = data.some(item => item.source === 'Google Custom Search');
      log(\`\\nTipo de resultados: \${resultadosReais ? '‚úÖ REAIS (Google Custom Search)' : '‚ùå SIMULADOS'}\`, resultadosReais ? 'green' : 'red');
      
      return resultadosReais;
    } else {
      log('‚ùå Nenhum resultado encontrado', 'red');
      return false;
    }
  } catch (error) {
    log(\`‚ùå Erro ao testar busca: \${error.message}\`, 'red');
    return false;
  }
}

// Executar testes
async function executarTestes() {
  const statusOk = await verificarStatusAPI();
  let buscaOk = false;
  
  if (statusOk) {
    buscaOk = await testarBusca();
  }
  
  log('\\nüìã RESULTADO FINAL DOS TESTES:', 'cyan');
  if (statusOk && buscaOk) {
    log('‚úÖ GOOGLE CUSTOM SEARCH API EST√Å FUNCIONANDO CORRETAMENTE NO RENDER', 'green');
  } else {
    log('‚ùå GOOGLE CUSTOM SEARCH API N√ÉO EST√Å FUNCIONANDO CORRETAMENTE NO RENDER', 'red');
    log('\\nüîß A√á√ïES RECOMENDADAS:', 'yellow');
    log('1. Verifique se todas as vari√°veis de ambiente foram configuradas corretamente');
    log('2. Certifique-se de que o deploy foi realizado com cache limpo');
    log('3. Verifique os logs do servidor no painel do Render para mais detalhes');
  }
}

// Iniciar testes
executarTestes();
`;

  // Salvar script em arquivo
  const filePath = path.join(process.cwd(), 'testar-configuracao-render.js');
  fs.writeFileSync(filePath, conteudo);
  
  log(`‚úÖ Script de teste criado: ${filePath}`, 'green');
}

// Executar verifica√ß√£o
const configOk = verificarConfiguracao();

// Se a configura√ß√£o n√£o estiver correta, gerar instru√ß√µes
if (!configOk) {
  gerarInstrucoesRender();
}

log('\nüìå PR√ìXIMOS PASSOS:', 'magenta');
log('1. Siga as instru√ß√µes no arquivo RENDER_CONFIG_ATUALIZADO.md para configurar o Render', 'yellow');
log('2. Ap√≥s fazer as altera√ß√µes, execute o script testar-configuracao-render.js para verificar', 'yellow');
log('   Comando: node testar-configuracao-render.js', 'cyan');
log('\n==============================================================', 'cyan');
